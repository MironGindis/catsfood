{"version":3,"sources":["components/Card/Card.jsx","Redux/main-reducer.js","App.js","serviceWorker.js","Redux/store.js","index.js","assets/images/Photo1.png"],"names":["Card","props","className","isDisabled","isActive","onClick","toggleActiveMode","id","taste","description","map","item","src","Catphoto","alt","weight","underCardInfo","initialState","Cards","mainReducer","state","action","type","connect","appPage","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"yRA2CeA,EAvCJ,SAACC,GACR,OAAO,yBAAKC,UAAU,gBACtB,yBAAKA,UAAYD,EAAME,WAAa,uBAAyBF,EAAMG,SAAU,qBAAsB,cAAgBC,QAAS,WAAYJ,EAAME,YAAYF,EAAMK,iBAAiBL,EAAMM,MACnL,yBAAKL,UAAU,mBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,kBAAf,2IAGA,yBAAKA,UAAU,eAAf,8CAGA,yBAAKA,UAAU,mBAAf,UACOD,EAAMO,OAEb,yBAAKN,UAAU,oBACVD,EAAMQ,YAAYC,KAAK,SAAAC,GACpB,OAAO,6BAAOA,SAM9B,yBAAKT,UAAU,cACP,yBAAKU,IAAKC,IAAUC,IAAI,SAEhC,yBAAKZ,UAAU,eACP,yBAAKA,UAAU,kBACdD,EAAMc,OAAO,kDAK9B,yBAAKb,UAAYD,EAAME,WAAa,8BAAgC,qBAClEF,EAAME,WAAP,mEAAmCF,EAAMO,MAAzC,iEAAgEP,EAAMG,SAA+HH,EAAMe,cAA1H,2KAA6B,0BAAMX,QAAS,WAAMJ,EAAMK,iBAAiBL,EAAMM,MAAlD,4BAAmE,uC,sBCpClLU,EAAe,CACfC,MAAQ,CACA,CACIX,GAAK,EACLC,MAAQ,wCACRC,YAAc,CACV,0CACA,8EAEJM,OAAS,MACTC,cAAgB,4LAChBZ,UAAW,EACXD,YAAa,GAEjB,CACII,GAAK,EACLC,MAAQ,iCACRC,YAAc,CACV,0CACA,gFAEJM,OAAS,IACTC,cAAgB,oPAChBZ,UAAW,EACXD,YAAa,GAEjB,CACII,GAAK,EACLC,MAAQ,iCACRC,YAAc,CACV,2CACA,qFACA,+FAEJM,OAAS,IACTC,cAAgB,8LAChBZ,UAAW,EACXD,YAAa,KAgCdgB,EA3BG,WAAoC,IAAnCC,EAAkC,uDAA1BH,EAAeI,EAAW,uCACjD,OAAQA,EAAOC,MACX,IA9CmB,qBA+Cf,OAAO,2BACAF,GADP,IAEIF,MAAQE,EAAMF,MAAMR,KAAK,SAAAC,GACrB,OAAIA,EAAKJ,KAAOc,EAAOd,GACZ,2BACAI,GADP,IAEIP,UAAWO,EAAKP,WAGb,eAAIO,QAM3B,QAAU,OAAOS,ICtCVG,eALO,SAACH,GAAD,MAAY,CAChCF,MAAQE,EAAMI,QAAQN,SAIgB,CAACZ,iBD2CX,SAACC,GAAD,MAAS,CACnCe,KApEuB,qBAoEGf,QC5CfgB,EAlBL,SAACtB,GACT,OAAO,yBAAKC,UAAU,OAClB,kKACA,yBAAKA,UAAU,eACZD,EAAMiB,MAAMR,KAAK,SAAAC,GAChB,OAAO,kBAAC,EAAD,CAAMJ,GAAII,EAAKJ,GAAIC,MAAOG,EAAKH,MAAOC,YAAaE,EAAKF,YAAaM,OAAQJ,EAAKI,OAAQX,SAAUO,EAAKP,SAAUD,WAAYQ,EAAKR,WAAYa,cAAeL,EAAKK,cAAeV,iBAAkBL,EAAMK,2BCCxMmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfFC,EAAWC,YAAgB,CAC3BP,QAAUL,IAKCa,EAFHC,YAAYH,GCCxBI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,QAGNK,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBGzI5BC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.48f407ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\nimport Catphoto from './../../assets/images/Photo1.png';\r\n\r\nlet Card = (props) => {\r\n    return <div className='Card-wrapper' >\r\n    <div className={(props.isDisabled)? \"Card-border disabled\":((props.isActive)?\"Card-border active\" :\"Card-border\")} onClick={()=> { if (!props.isDisabled) props.toggleActiveMode(props.id)}}>\r\n        <div className='Card-background'>\r\n            <div className=\"Card\" >\r\n                <div className='Card_mainInfo'>\r\n                    <div className='Card_preheader'>\r\n                        Cказачное заморское яство\r\n                    </div>\r\n                    <div className='Card_header'>\r\n                        Нямушка \r\n                    </div>\r\n                    <div className='Card_postheader'>\r\n                        с {props.taste}\r\n                    </div>\r\n                    <div className='Card_description'>\r\n                        {props.description.map( item => {\r\n                            return <div >{item}</div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                              \r\n            </div>\r\n            <div className='Card_image'>\r\n                    <img src={Catphoto} alt='cat'/>\r\n                </div> \r\n            <div className='Card_circle'>\r\n                    <div className='Circle_content'>\r\n                    {props.weight}<span>кг</span>\r\n                    </div>\r\n            </div>\r\n        </div>   \r\n    </div>\r\n    <div className={(props.isDisabled)? 'UnderCard_content__disabled' : 'UnderCard_content'}>\r\n    {(props.isDisabled)? `Печалька, с ${props.taste} закончился` :((!props.isActive)? <>Чего сидишь? Порадуй котэ, <span onClick={()=> {props.toggleActiveMode(props.id)}}>купи</span><span>.</span></> : props.underCardInfo) }\r\n    </div>\r\n</div>\r\n}\r\n\r\nexport default Card;\r\n","const TOGGLE_ACTIVE_MODE = 'TOGGLE_ACTIVE_MODE';\r\n\r\nlet initialState = {\r\n    Cards : [\r\n            {\r\n                id : 1,\r\n                taste : 'фуа-гра',\r\n                description : [\r\n                    '10 порций',\r\n                    'мышь в подарок'\r\n                ],\r\n                weight : '0,5',    \r\n                underCardInfo : 'Печень утки разварная с артишоками.' ,\r\n                isActive : false,\r\n                isDisabled : false,   \r\n            },\r\n            {\r\n                id : 2,\r\n                taste : 'рыбой',\r\n                description : [\r\n                    '40 порций',\r\n                    '2 мыши в подарок'\r\n                ],\r\n                weight : '2', \r\n                underCardInfo : 'Головы щучьи с чесноком да свежайшая сёмгушка.',\r\n                isActive : false,\r\n                isDisabled : false,  \r\n            },\r\n            {\r\n                id : 3,\r\n                taste : 'курой',\r\n                description : [\r\n                    '100 порций',\r\n                    '5 мышей в подарок',\r\n                    'заказчик доволен'\r\n                ],\r\n                weight : '5', \r\n                underCardInfo : 'Филе из цыплят с трюфелями в бульоне.',\r\n                isActive : false,\r\n                isDisabled : true,  \r\n            },\r\n    ]\r\n}\r\n\r\nlet mainReducer = (state = initialState , action) => {\r\n    switch (action.type) {\r\n        case (TOGGLE_ACTIVE_MODE) : {\r\n            return {\r\n                ...state,\r\n                Cards : state.Cards.map( item => {\r\n                    if (item.id === action.id) {\r\n                        return {\r\n                            ...item, \r\n                            isActive: !item.isActive,\r\n                        }\r\n                    } else {\r\n                        return {...item}\r\n                    }\r\n                    \r\n                })\r\n            }\r\n        }\r\n        default : return state;\r\n    }\r\n}\r\n\r\n\r\nexport let toggleActiveMode = (id) => ({\r\n    type: TOGGLE_ACTIVE_MODE, id\r\n}) \r\n\r\nexport default mainReducer;","import React from 'react';\nimport Card from './components/Card/Card';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport {toggleActiveMode} from './Redux/main-reducer';\n\nlet App = (props) => {\n  return <div className='App'> \n      <h1>Ты сегодня покормил кота?</h1>\n      <div className='Cards_block'>\n        {props.Cards.map( item => {\n          return <Card id={item.id} taste={item.taste} description={item.description} weight={item.weight} isActive={item.isActive} isDisabled={item.isDisabled} underCardInfo={item.underCardInfo} toggleActiveMode={props.toggleActiveMode}/>\n        })}\n      </div>\n  </div>\n}\n\n\n\nlet mapStateToProps = (state) => ({\n  Cards : state.appPage.Cards,\n})\n\n\nexport default connect(mapStateToProps, {toggleActiveMode})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import mainReducer from './main-reducer';\r\nimport { combineReducers, createStore} from 'redux';\r\n\r\nlet reducers = combineReducers({\r\n    appPage : mainReducer, \r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Photo1.4766b0a2.png\";"],"sourceRoot":""}